#version 450
layout(binding=0) uniform sampler2D old_depthtexture;
layout(binding=1,r32f) uniform writeonly image2D filtered_depthtexture;

layout(local_size_x=4,local_size_y=4,local_size_z=1) in;

void main(){
    ivec2 outcoord = ivec2(gl_GlobalInvocationID.xy);
    ivec2 imagesize = imageSize(filtered_depthtexture);
    
    if(outcoord.x >= imagesize.x || outcoord.y >= imagesize.y) return;
    imageStore(filtered_depthtexture,outcoord,vec4(0,0,0,0));

    float u = (outcoord.x + 0.5)/imagesize.x;
    float v = (outcoord.y + 0.5)/imagesize.y;

    float depth = texture(old_depthtexture,vec2(u,v)).r;
    int filter_radius = 15;
    float sum = 0;
    float wsum = 0;
    float spatial_blurscale = 0.1;
    float range_blurscale = 1;
    for(int dx = -filter_radius;dx<=filter_radius;++dx)
        for(int dy = -filter_radius;dy<=filter_radius;++dy){
        ivec2 sample_coord = outcoord + ivec2(dx,dy);
        if(sample_coord.x < 0 || sample_coord.x >= imagesize.x || sample_coord.y < 0 || sample_coord.y >= imagesize.y){
            continue;
        }
        float sample_u = (sample_coord.x + 0.5)/imagesize.x;
        float sample_v = (sample_coord.y + 0.5)/imagesize.y;

        float dsample = texture(old_depthtexture,vec2(sample_u,sample_v)).r;
    
        //spatial domain
        float r1 = sqrt(dx*dx + dy*dy)*spatial_blurscale;
        float w = exp(-r1*r1);

        //range domain
        float r2 = (dsample - depth)*range_blurscale;
        float g = exp(-r2*r2);

        sum += w*g*dsample;
        wsum += w*g;
        
    }
    if(wsum > 0){
        sum /= wsum;
    }
    imageStore(filtered_depthtexture,outcoord,vec4(depth,0,0,0));
}