#version 450

float PI = 3.1415926;

layout(local_size_x=4,local_size_y=4,local_size_z=1) in;

layout(binding=0) uniform UniformRenderingObject{
    float zNear;
    float zFar;
    float fovy;
    float aspect;

    mat4 model;
    mat4 view;
    mat4 projection;
    mat4 inv_projection;

    float particleRadius;
};
ivec2 imagesize;

layout(binding=1) uniform sampler2D depthimage;
layout(binding=2) uniform sampler2D thicknessimage;
layout(binding=3,rgba8) uniform writeonly image2D dstimage;
float Fresnel(float cos_v,float R0){
    return R0 + (1-R0)*(1-pow(cos_v,5));
}
vec3 viewLocationRecon(vec2 coord){
    float u = coord.x/imagesize.x;
    float v = coord.y/imagesize.y;
    float d;
    if(u<0||v<0||u>1||v>1){
        d = 1000;
    }
    else{
        d = texture(depthimage,vec2(u,v)).r;
    }
    vec4 ndcLocation = vec4(u*2-1,v*2-1,d,1);
    float clipw = 1.0f/((inv_projection*ndcLocation).w);
    vec4 viewLocation = (clipw*inv_projection*ndcLocation);
    return viewLocation.xyz;
}
void main(){
    ivec2 outcoord = ivec2(gl_GlobalInvocationID.xy);
    imagesize = imageSize(dstimage);

    if(outcoord.x >= imagesize.x || outcoord.y >= imagesize.y) return;

    imageStore(dstimage,outcoord,vec4(0,0,0,0));
    
    vec2 centerCoord = vec2(outcoord.x+0.5,outcoord.y+0.5);
    float u = centerCoord.x/imagesize.x;
    float v = centerCoord.y/imagesize.y;
    float d = texture(depthimage,vec2(u,v)).r;
    if(d >= 100) return;

    vec3 CenterViewLocation = viewLocationRecon(centerCoord);

    vec2 topCoord = centerCoord + vec2(0,-1);
    vec2 bottomCoord = centerCoord + vec2(0,1);
    vec2 leftCoord = centerCoord + vec2(-1,0);
    vec2 rightCoord = centerCoord + vec2(1,0);

    vec3 leftDx = CenterViewLocation - viewLocationRecon(leftCoord);
    vec3 rightDx = viewLocationRecon(rightCoord) - CenterViewLocation;
    vec3 topDy =  viewLocationRecon(topCoord)-CenterViewLocation;
    vec3 bottomDy = CenterViewLocation-viewLocationRecon(bottomCoord);

    vec3 dx = leftDx,dy = topDy;
    if(abs(dx.z) > abs(rightDx.z)){
        dx = rightDx;
    }
    if(abs(dy.z) > abs(bottomDy.z)){
        dy = bottomDy;
    }
    vec3 normal = normalize(cross(dx,dy));
    
    vec3 normal_color = (normal/2 + vec3(0.5,0.5,0.5));
    float linear_z_zero_to_one = (-CenterViewLocation.z - zNear)/(zFar-zNear);
    vec3 linear_depth_color = vec3(linear_z_zero_to_one,linear_z_zero_to_one,linear_z_zero_to_one);
    imageStore(dstimage,outcoord,vec4(normal_color,1));
    
}
