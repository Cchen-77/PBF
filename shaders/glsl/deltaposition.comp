#version 450
struct Particle{
    vec3 Location;
    vec3 Velocity;
    vec3 DeltaLocation;
    float Lambda;
    float Density;
    float Mass;

    vec3 TmpVelocity;

    uint CellHash;
    uint TmpCellHash;

    uint NumNgbrs;
};
layout(binding=0) uniform SimulateObj{
    float dt;
    float restDensity;
    float sphRadius;
    uint numParticles;
};

layout(binding=2) buffer ParticleSSBOout{
    Particle particlesOut[];
};
layout(binding=3) readonly buffer ParticleNgbrs{
    uint particleNgbrs[];
};
layout(local_size_x=512,local_size_y=1,local_size_z=1) in;

float PI = 3.1415926;

float W_Poly6(vec3 r,float h)
{
    float ret = 0.0;
	float rl = length(r);
	float q = rl / h;
	float h3 = h * h * h;
	if (q <= 0.5)
	{
		float q2 = q * q;
		float q3 = q2 * q;
		ret = 8.0 / (PI * h3) * (6.0 * q3 - 6.0 * q2 + 1.0);
	}
	else
	{
		ret = 16.0 / (PI * h3) * pow(1 - q, 3.0);
	}
	return ret;
}
vec3 Grad_W_Spiky(vec3 r,float h)
{
    vec3 ret = {0,0,0};
	float rl = length(r);
	float q = rl / h;
	float h3 = h * h * h;
	if (rl > 1.0e-6)
	{
		vec3 gradq = float(1.0 / (rl * h)) * r;
		if (q <= 0.5)
		{
			ret = float(48.0 / (PI * h3) * q * (3.0 * q - 2.0)) * gradq;
		}
		else
		{
			float factor = 1.0 - q;
			ret = float(48.0 / (PI * h3) * (-factor * factor)) * gradq;
		}
	}
	return ret;
}
void main(){
    uint globalindex = gl_GlobalInvocationID.x;
    uint localindex = gl_LocalInvocationID.x;
    
    particlesOut[globalindex].DeltaLocation = vec3(0,0,0);
    for(uint i=0;i<particlesOut[globalindex].NumNgbrs;++i){
       uint ngbr = particleNgbrs[128*globalindex+i];
       particlesOut[globalindex].DeltaLocation += (particlesOut[globalindex].Lambda + particlesOut[ngbr].Lambda)
                                                *Grad_W_Spiky(particlesOut[globalindex].Location - particlesOut[ngbr].Location,sphRadius);
    }
    particlesOut[globalindex].DeltaLocation /= restDensity;

    
}