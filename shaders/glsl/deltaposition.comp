#version 450
struct Particle{
    vec3 Location;
    vec3 Velocity;
    vec3 DeltaLocation;
    float Lambda;
    float Density;
    float Mass;

    vec3 TmpVelocity;

    uint CellHash;
    uint TmpCellHash;

    uint NumNgbrs;
};
layout(binding=0) uniform SimulateObj{
    float dt;
    float accumulated_t;
    float restDensity;
    float sphRadius;
    uint numParticles;

    float coffPoly6;
    float coffSpiky;
    float coffGradSpiky;

    float scorrK;
    float scorrN;
    float scorrQ;
};

layout(binding=2) buffer ParticleSSBOout{
    Particle particlesOut[];
};
layout(binding=3) readonly buffer ParticleNgbrs{
    uint particleNgbrs[];
};
layout(local_size_x=512,local_size_y=1,local_size_z=1) in;

float W_Poly6(vec3 r, float h)
{
    float radius = length(r);
    float res = 0.0f;
    if (radius <= h && radius >= 0)
    {
        float item = 1 - pow(radius / h, 2);
        res = coffPoly6 * pow(item, 3);
    }
    return res;
}
float WSpiky(vec3 r, float h)
{
    float radius = length(r);
    float res = 0.0f;
    if (radius <= h && radius >= 0)
    {
        float item = 1 - (radius / h);
        res = coffSpiky * pow(item, 6);
    }
    return res;
}
vec3 Grad_W_Spiky(vec3 r, float h)
{
    float radius = length(r);
    vec3 res = vec3(0.0f, 0.0f, 0.0f);
    if (radius < h && radius > 0)
    {
        float item = 1 - (radius / h);
        res = coffGradSpiky * pow(item, 2) * normalize(r);
    }
    return res;
}
void main(){
    uint globalindex = gl_GlobalInvocationID.x;
    uint localindex = gl_LocalInvocationID.x;
    if(globalindex >= numParticles) return;
    particlesOut[globalindex].DeltaLocation = vec3(0,0,0);
    for(uint i=0;i<particlesOut[globalindex].NumNgbrs;++i){
       uint ngbr = particleNgbrs[128*globalindex+i];
       vec3 r = particlesOut[globalindex].Location - particlesOut[ngbr].Location;
       float scorr = -scorrK/restDensity*pow(W_Poly6(r,sphRadius)/W_Poly6(vec3(scorrQ*sphRadius,0,0),sphRadius),scorrN);
       particlesOut[globalindex].DeltaLocation += particlesOut[ngbr].Mass*(particlesOut[globalindex].Lambda + particlesOut[ngbr].Lambda + scorr)
                                                *Grad_W_Spiky(r,sphRadius);
    }
    particlesOut[globalindex].DeltaLocation /= restDensity;


}