#version 450
struct Particle{
    vec3 Location;
    vec3 Velocity;
    vec3 DeltaLocation;
    float Lambda;
    float Density;
    float Mass;

    vec3 TmpVelocity;

    uint CellHash;
    uint TmpCellHash;

    uint NumNgbrs;
};
layout(binding=0) uniform SimulateObj{
    float dt;
    float accumulated_t;
    float restDensity;
    float sphRadius;
    uint numParticles;

    float coffPoly6;
    float coffSpiky;
    float coffGradSpiky;

    float scorrK;
    float scorrN;
    float scorrQ;
};

layout(binding=2) buffer ParticleSSBOout{
    Particle particlesOut[];
};
layout(binding=3) readonly buffer ParticleNgbrs{
    uint particleNgbrs[];
};
layout(local_size_x=512,local_size_y=1,local_size_z=1) in;

float W_Poly6(vec3 r, float h)
{
    float radius = length(r);
    float res = 0.0f;
    if (radius <= h && radius >= 0)
    {
        float item = 1 - pow(radius / h, 2);
        res = coffPoly6 * pow(item, 3);
    }
    return res;
}
float WSpiky(vec3 r, float h)
{
    float radius = length(r);
    float res = 0.0f;
    if (radius <= h && radius >= 0)
    {
        float item = 1 - (radius / h);
        res = coffSpiky * pow(item, 6);
    }
    return res;
}
vec3 Grad_W_Spiky(vec3 r, float h)
{
    float radius = length(r);
    vec3 res = vec3(0.0f, 0.0f, 0.0f);
    if (radius < h && radius > 0)
    {
        float item = 1 - (radius / h);
        res = coffGradSpiky * pow(item, 2) * normalize(r);
    }
    return res;
}
void main(){
    uint particleindex = gl_GlobalInvocationID.x;
    if(particleindex >= numParticles) return;

    vec3 omega = vec3(0,0,0);
    vec3 omega_dx = vec3(0,0,0);
    vec3 omega_dy = vec3(0,0,0);
    vec3 omega_dz = vec3(0,0,0);

    for(uint i=0;i<particlesOut[particleindex].NumNgbrs;++i){
        uint ngbr = particleNgbrs[128*particleindex+i];
  
        vec3 vgap = particlesOut[ngbr].TmpVelocity- particlesOut[particleindex].TmpVelocity;
        vec3 locationgap = particlesOut[particleindex].Location - particlesOut[ngbr].Location;
        omega += cross(vgap,-Grad_W_Spiky(locationgap,sphRadius));

        omega_dx += cross(vgap,Grad_W_Spiky(locationgap + vec3(0.001,0,0),sphRadius));

        omega_dy += cross(vgap,Grad_W_Spiky(locationgap+ vec3(0,0.001,0),sphRadius));

        omega_dz += cross(vgap,Grad_W_Spiky(locationgap + vec3(0,0,0.001),sphRadius));
    }
    float omega_length = length(omega);
    vec3 N = vec3(length(omega_dx)-omega_length,length(omega_dy)-omega_length,length(omega_dz)-omega_length);
    N = normalize(N);
    if(isnan(N.x) || isnan(N.y) || isnan(N.z)) return;
    vec3 force = 5e-8*cross(N,omega);
    particlesOut[particleindex].Velocity += force*dt;
}